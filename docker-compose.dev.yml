version: '3'
services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - ./backend/public:/app/backend/public
      - ./frontend/public:/app/frontend/public
      - ./dev-conf/nginx/:/etc/nginx:ro
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - frontend
      - backend

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./docker/${ENVIRONMENT}/backend/Dockerfile.dev
    restart: unless-stopped
    ports:
      - ${BEPORT}:${BEPORT}
      - 9999:9999
    networks:
      - internal
    depends_on:
      - postgres
    env_file: .env
    volumes:
      - ./backend:/app
      - /backend/node_modules

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./docker/${ENVIRONMENT}/frontend/Dockerfile.dev
    restart: unless-stopped
    ports:
      - ${FEPORT}:${FEPORT}
      - 9998:9998
    networks:
      - internal
    env_file:
      - ./.env
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /frontend/node_modules

  postgres:
    image: postgres
    container_name: postgres
    platform: linux/amd64
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${PGUSERNAME}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    networks:
      - internal

  umami:
    container_name: umami
    image: ghcr.io/umami-software/umami:postgresql-latest
    ports:
      - "3500:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_TYPE: postgresql
      APP_SECRET: ${JWT_KEY}
    depends_on:
      - db
    restart: always
    networks:
      - internal
  db:
    container_name: umamidb
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${UMDATABASE}
      POSTGRES_USER: ${UMUSERNAME}
      POSTGRES_PASSWORD: ${UMPASSWORD}
    volumes:
      - ./sql/schema.postgresql.sql:/docker-entrypoint-initdb.d/schema.postgresql.sql:ro
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - internal

volumes:
  postgres-data:
  umami-db-data:

networks:
  internal:
    name: internal
    driver: bridge